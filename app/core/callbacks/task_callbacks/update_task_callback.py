from pyrogram import enums

from app.core.keyboards.auth_keyboard import auth_keyboard, denied_keyboard
from app.core.keyboards.task_keyboard import update_task_keyboard, update_task_status_keyboard, \
    update_task_priority_keyboard
from app.core.repositories.users import UsersRepository
from app.core.repositories.tasks import TasksRepository
from app.enums.tasks import UserTasksStates
from app.settings.config_settings import user_state, task_update


async def update_task_callback(client, callback_query):
    task_id = callback_query.data.split('_')[2]
    task_update["task_id"] = int(task_id)
    user = await UsersRepository().user_is_verified(chat_id=callback_query.message.chat.id)
    task = await TasksRepository().get_task_by_id(task_id=int(task_id))
    task_update["task_name"] = task.task_name
    if user:
        await callback_query.message.reply(
            "<b>–í—ã–±–∏—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω—Ç—å:</b> ‚úçÔ∏è\n\n"
            f"<b><i>–ù–∞–∑–≤–∞–Ω–∏–µ: {task.task_name}</i></b>\n"
            f"<i>–û–ø–∏—Å—Å–∞–Ω–∏–µ: {task.task_descriptions}</i>\n"
            f"<b><i>–°—Ç–∞—Ç—É—Å: {task.readable_status}</i></b>\n"
            f"<b><i>–ü—Ä–µ–æ—Ä–∏—Ç–µ—Ç: {task.readable_priority}</i></b>\n",
            parse_mode=enums.ParseMode.HTML, reply_markup=update_task_keyboard(task_update["task_id"])
        )
    else:
        await callback_query.message.reply(
            "üî¥\n\n"
            "<b>–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!</b>\n\n"
            "–î–ª—è —ç—Ç–æ–≥–æ <b><i>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ</i></b> –≤ <b>–°–ò–°–¢–ï–ú–£</b>",
            parse_mode=enums.ParseMode.HTML, reply_markup=auth_keyboard())


async def update_name_task_callback(client, callback_query):
    user = await UsersRepository().user_is_verified(chat_id=callback_query.message.chat.id)
    if user:
        user_id = callback_query.from_user.id
        user_state.set_state(user_id, UserTasksStates.WAITING_FOR_TASK_UPDATE_NAME)
        await callback_query.message.reply(
            "–í–≤–µ–¥–∏—Ç–µ <b>–ù–û–í–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –ó–ê–î–ê–ß–ò</b> ‚úçÔ∏è\n\n"
            "–ü—Ä–∏–º–µ—Ä: <i>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–µ–∏ –æ—à–∏–±–æ–∫</i> ",
            parse_mode=enums.ParseMode.HTML, reply_markup=denied_keyboard()
        )
    else:
        await callback_query.message.reply(
            "üî¥\n\n"
            "<b>–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!</b>\n\n"
            "–î–ª—è —ç—Ç–æ–≥–æ <b><i>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ</i></b> –≤ <b>–°–ò–°–¢–ï–ú–£</b>",
            parse_mode=enums.ParseMode.HTML, reply_markup=auth_keyboard())


async def update_desc_task_callback(client, callback_query):
    user = await UsersRepository().user_is_verified(chat_id=callback_query.message.chat.id)
    if user:
        user_id = callback_query.from_user.id
        user_state.set_state(user_id, UserTasksStates.WAITING_FOR_TASK_UPDATE_DESCRIPTION)
        await callback_query.message.reply(
            "–í–≤–µ–¥–∏—Ç–µ <b>–ù–û–í–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –ó–ê–î–ê–ß–ò</b> ‚úçÔ∏è\n\n"
            "–ü—Ä–∏–º–µ—Ä: <i>–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</i>",
            parse_mode=enums.ParseMode.HTML, reply_markup=denied_keyboard()
        )
    else:
        await callback_query.message.reply(
            "üî¥\n\n"
            "<b>–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!</b>\n\n"
            "–î–ª—è —ç—Ç–æ–≥–æ <b><i>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ</i></b> –≤ <b>–°–ò–°–¢–ï–ú–£</b>",
            parse_mode=enums.ParseMode.HTML, reply_markup=auth_keyboard())


async def update_status_task_callback(client, callback_query):
    user = await UsersRepository().user_is_verified(chat_id=callback_query.message.chat.id)
    if user:
        await callback_query.message.reply(
            "<b>–í—ã–±–∏—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–∏–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.</b>",
            parse_mode=enums.ParseMode.HTML, reply_markup=update_task_status_keyboard(task_update["task_id"])
        )
    else:
        await callback_query.message.reply(
            "üî¥\n\n"
            "<b>–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!</b>\n\n"
            "–î–ª—è —ç—Ç–æ–≥–æ <b><i>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ</i></b> –≤ <b>–°–ò–°–¢–ï–ú–£</b>",
            parse_mode=enums.ParseMode.HTML, reply_markup=auth_keyboard())


async def update_priority_task_callback(client, callback_query):
    user = await UsersRepository().user_is_verified(chat_id=callback_query.message.chat.id)
    if user:
        await callback_query.message.reply(
            "<b>–í—ã–±–∏—Ä–∏—Ç–µ –ø—Ä–µ–æ—Ä–∏—Ç–µ—Ç –∏–∑ –ø—Ä–∏–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.</b>",
            parse_mode=enums.ParseMode.HTML, reply_markup=update_task_priority_keyboard(task_update["task_id"])
        )
    else:
        await callback_query.message.reply(
            "üî¥\n\n"
            "<b>–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!</b>\n\n"
            "–î–ª—è —ç—Ç–æ–≥–æ <b><i>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ</i></b> –≤ <b>–°–ò–°–¢–ï–ú–£</b>",
            parse_mode=enums.ParseMode.HTML, reply_markup=auth_keyboard())


async def update_status_callback(client, callback_query):
    status = callback_query.data.split('_')[1]
    task_update["status"] = status
    task_name = task_update["task_name"]
    updated_task = await TasksRepository().update_task(
        task_id=task_update["task_id"],
        task_update_data=task_update
    )
    if updated_task:
        await callback_query.message.reply(
            f"<b>–ó–∞–¥–∞—á–∞ {task_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>‚úÖ\n\n",
            parse_mode=enums.ParseMode.HTML
        )
        await update_task_callback(client, callback_query)


async def update_priority_callback(client, callback_query):
    priority = callback_query.data.split('_')[1]
    task_update["priority"] = priority
    task_name = task_update["task_name"]
    updated_task = await TasksRepository().update_task(
        task_id=task_update["task_id"],
        task_update_data=task_update
    )
    if updated_task:
        await callback_query.message.reply(
            f"<b>–ó–∞–¥–∞—á–∞ {task_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>‚úÖ\n\n",
            parse_mode=enums.ParseMode.HTML
        )
        await update_task_callback(client, callback_query)
