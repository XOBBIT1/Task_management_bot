from pyrogram import enums

from app.core.keyboards.auth_keyboard import denied_keyboard, auth_keyboard
from app.core.keyboards.task_keyboard import user_tasks_keyboard
from app.core.repositories.tasks import TasksRepository
from app.core.repositories.users import UsersRepository
from app.enums.tasks import UserTasksStates
from app.settings.config_settings import create_task, user_state


async def tasks_main_menu_command(client, message):
    user = await UsersRepository().user_is_verified(chat_id=message.chat.id)
    if user:
        await message.reply(
            "<b>–ú–µ–Ω—é –ó–ê–î–ê–ß üìã</b>\n\n"
            "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ:\n"
            "üñãüñåüñç <i>–°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.\n</i>"
            "üìä <i>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.\n</i>",
            parse_mode=enums.ParseMode.HTML, reply_markup=user_tasks_keyboard()
        )
    else:
        await message.reply(
            "üî¥\n\n"
            "<b>–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!</b>\n\n"
            "–î–ª—è —ç—Ç–æ–≥–æ <b><i>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ</i></b> –≤ <b>–°–ò–°–¢–ï–ú–£</b>",
            parse_mode=enums.ParseMode.HTML, reply_markup=auth_keyboard())


async def get_task_name_command(client, message):
    user_id = message.from_user.id
    state = user_state.get_state(user_id)

    if state == UserTasksStates.WAITING_FOR_TASK_NAME:
        task_name = message.text
        create_task["task_name"] = task_name
        user_state.set_state(user_id, UserTasksStates.WAITING_FOR_TASK_DESCRIPTION)

        await message.reply(
            "<b>–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <i>–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</i>",
            parse_mode=enums.ParseMode.HTML, reply_markup=denied_keyboard()
        )


async def create_task_command(client, message):
    user = await UsersRepository().user_is_verified(chat_id=message.chat.id)
    user_id = message.from_user.id
    state = user_state.get_state(user_id)

    if state == UserTasksStates.WAITING_FOR_TASK_DESCRIPTION:
        task_descriptions = message.text
        create_task["task_descriptions"] = task_descriptions
        task = await TasksRepository().create_task(instance=create_task, creator_id=user.id)
        await message.reply(
            f"–ó–∞–¥–∞—á–∞ {task.task_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ‚úÖ",
            parse_mode=enums.ParseMode.HTML
        )
    await tasks_main_menu_command(client, message)
