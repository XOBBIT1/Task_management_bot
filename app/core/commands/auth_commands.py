from pyrogram import enums

from app.core.keyboards.auth_keyboard import auth_keyboard, denied_keyboard, main_menu_keyboard
from app.core.repositories.users import UsersRepository
from app.enums.auth import RegistrationStates
from app.settings.config_settings import user_state, user_data


async def start_command(client, message):
    user = await UsersRepository().user_is_verified(chat_id=message.chat.id)
    if user:
        await message.reply(
            f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskManager Pro! üéØ\n\n"
            f"–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –∑–∞–¥–∞—á–∏, —É–ª—É—á—à–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ!\n"
            f"‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            f"üìã –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∞–º–∏.\n"
            f"üë• –î–µ–ª–∏—Ç–µ—Å—å –∑–∞–¥–∞—á–∞–º–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å.\n"
            f"üîî –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n"
            f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã.", parse_mode=enums.ParseMode.HTML, reply_markup=auth_keyboard()
        )
    else:
        await message.reply(
            f"–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}!</b>\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskManager! üéØ\n\n"
            f"<b>üîë –í—ã –≤–ø–µ—Ä–≤—ã–µ —É –Ω–∞—Å?</b>\n"
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–µ –∑–∞–¥–∞—á–∞–º–∏!\n\n"
            f"<b>üëã –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?</b>\n"
            f"–ü—Ä–æ—Å—Ç–æ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –í–∞—à–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏!\n\n"
            f"<b>‚ú® –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –∫–ª–∏–∫–∞–π—Ç–µ:</b>\n"
            f"<i>1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –°–æ–∑–¥–∞–π—Ç–µ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∑–∞ –º–∏–Ω—É—Ç—É.</i>\n"
            f"<i>2Ô∏è‚É£ –í—Ö–æ–¥: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.</i>\n\n"
            f"<b>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –ª–µ–≥–∫–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!</b> üöÄ",
            parse_mode=enums.ParseMode.HTML, reply_markup=auth_keyboard()
        )


async def main_menu_command(client, message):
    await message.reply(
        "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏–µ–µ! üéäüéäüéä\n\n</b>"
        "–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –í–∞—à–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏!\n\n"
        "<b>‚ú® –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –∫–ª–∏–∫–∞–π—Ç–µ:</b>\n"
        "<i>1Ô∏è‚É£ –í—Ö–æ–¥: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.</i>\n\n"
        "<b>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –ª–µ–≥–∫–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!</b> üöÄ",
        parse_mode=enums.ParseMode.HTML, reply_markup=main_menu_keyboard()
    )


async def registration_get_name(client, message):
    user_data["username"] = message.from_user.username
    user_data["chat_id"] = message.chat.id
    user_id = message.from_user.id
    state = user_state.get_state(user_id)

    if state == RegistrationStates.WAITING_FOR_NAME:
        name = message.text
        user_data["name"] = name
        user_state.set_state(user_id, RegistrationStates.WAITING_FOR_EMAIL)

        await message.reply(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É üßëüì©\n\n"
            "–ü—Ä–∏–º–µ—Ä: <i>example@mail.com</i>",
            parse_mode=enums.ParseMode.HTML, reply_markup=denied_keyboard()
        )


async def registration_get_email(client, message):
    user_id = message.from_user.id
    state = user_state.get_state(user_id)

    if state == RegistrationStates.WAITING_FOR_EMAIL:
        user_email = message.text
        user_data["email"] = user_email
        user_state.set_state(user_id, RegistrationStates.WAITING_FOR_PASSWORD)

        await message.reply(
            "–û—Ç–ª–∏—á–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–∞—Ä–æ–ª—å!\n"
            "<b>–ù–ò–ö–û–ú–£ –ù–ï –°–û–û–ë–©–ê–ô–¢–ï –ï–ì–û ü§´</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <i>AWD-dwdw212_1_@</i>",
            parse_mode=enums.ParseMode.HTML, reply_markup=denied_keyboard()
        )


async def registration_get_password(client, message):
    user_id = message.from_user.id
    state = user_state.get_state(user_id)

    if state == RegistrationStates.WAITING_FOR_PASSWORD:
        user_password = message.text
        user_data["password"] = user_password
        await UsersRepository().create_user(instance=user_data)
        await message.reply(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n\n",
            parse_mode=enums.ParseMode.HTML
        )
    await main_menu_command(client, message)


async def start_registration(client, message):
    user_id = message.from_user.id
    state = user_state.get_state(user_id)
    if state == RegistrationStates.WAITING_FOR_NAME:
        await registration_get_name(client, message)
    elif state == RegistrationStates.WAITING_FOR_EMAIL:
        await registration_get_email(client, message)
    elif state == RegistrationStates.WAITING_FOR_PASSWORD:
        await registration_get_password(client, message)
