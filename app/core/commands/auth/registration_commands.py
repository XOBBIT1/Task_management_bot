import logging

from pyrogram import enums, Client
from pyrogram.types import Message

from app.core.commands.menu_commands import main_menu_command
from app.core.keyboards.auth_keyboard import denied_keyboard
from app.core.repositories.users import UsersRepository
from app.settings.email_validator import validate_user_email
from app.enums.auth import RegistrationStates
from app.settings.config_settings import user_state, user_registration


async def try_again_registration_email(client: Client, message: Message):
    """
   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
   –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ—á—Ç—ã.

   –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
       client (Client): –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
       message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.

   –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:
       –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   """
    user_id = message.from_user.id
    user_state.set_state(user_id, RegistrationStates.WAITING_FOR_EMAIL)
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ <b>–í–∞—à—É –ø–æ—á—Ç—É</b> ‚úçÔ∏è\n\n"
        "–ü—Ä–∏–º–µ—Ä: <i>example@mail.com</i>",
        parse_mode=enums.ParseMode.HTML, reply_markup=denied_keyboard()
    )


async def registration_get_name(client: Client, message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ ID —á–∞—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ—á—Ç—É.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        client (Client): –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∏–º—è.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:
        –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_registration["username"] = message.from_user.username
    user_registration["chat_id"] = message.chat.id
    user_id = message.from_user.id
    state = user_state.get_state(user_id)

    if state == RegistrationStates.WAITING_FOR_NAME:
        name = message.text
        user_registration["name"] = name
        user_state.set_state(user_id, RegistrationStates.WAITING_FOR_EMAIL)

        await message.reply(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É üßëüì©\n\n"
            "–ü—Ä–∏–º–µ—Ä: <i>example@mail.com</i>",
            parse_mode=enums.ParseMode.HTML, reply_markup=denied_keyboard()
        )


async def registration_get_email(client: Client, message: Message):
    """
   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
   –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã –∏ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∞–¥—Ä–µ—Å–æ–º. –ï—Å–ª–∏ –ø–æ—á—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å.

   –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
       client (Client): –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
       message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.

   –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:
       –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ—á—Ç—ã.
   """
    user_id = message.from_user.id
    state = user_state.get_state(user_id)

    if state == RegistrationStates.WAITING_FOR_EMAIL:
        user_email = message.text
        user_registration["email"] = user_email
        if not await validate_user_email(user_email):
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã üì©. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await try_again_registration_email(client, message)
        else:
            user = await UsersRepository().get_user_by_email(email=user_email)
            if user:
                logging.warning(f"Duplicate email attempt: {user_email} by user {message.from_user.id}")
                await message.reply(
                    "–ü–æ–ª—å–∑–æ–≤—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
                    "<b>–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É</b>",
                    parse_mode=enums.ParseMode.HTML
                )
                await try_again_registration_email(client, message)
                raise Exception("User with such email already exists")
            else:
                user_state.set_state(user_id, RegistrationStates.WAITING_FOR_PASSWORD)
                await message.reply(
                    "–û—Ç–ª–∏—á–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–∞—Ä–æ–ª—å!\n"
                    "<b>–ù–ò–ö–û–ú–£ –ù–ï –°–û–û–ë–©–ê–ô–¢–ï –ï–ì–û ü§´</b>\n\n"
                    "–ü—Ä–∏–º–µ—Ä: <i>AWD-dwdw212_1_@</i>",
                    parse_mode=enums.ParseMode.HTML, reply_markup=denied_keyboard()
                )


async def registration_get_password(client: Client, message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        client (Client): –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –ø–∞—Ä–æ–ª—å.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:
        –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user_id = message.from_user.id
    state = user_state.get_state(user_id)

    if state == RegistrationStates.WAITING_FOR_PASSWORD:
        user_password = message.text
        user_registration["password"] = user_password
        await UsersRepository().create_user(instance=user_registration)
        await message.reply(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n\n",
            parse_mode=enums.ParseMode.HTML
        )
    await main_menu_command(client, message)
